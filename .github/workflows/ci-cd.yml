name: 🚀 Zenith Platform CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '22.16.0'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ===============================
  # Code Quality & Testing
  # ===============================
  quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 🔧 Install dependencies
      run: npm ci
      
    - name: 🔍 Lint code
      run: npm run lint
      
    - name: 🔎 Type check
      run: npm run typecheck
      
    - name: 🧪 Run tests
      run: npm run test
      
    - name: 📊 Upload coverage
      uses: codecov/codecov-action@v3
      if: success()

  # ===============================
  # Database Schema Validation
  # ===============================
  database:
    name: 🗄️ Database Schema
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: zenith_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 🔧 Install dependencies
      run: npm ci
      
    - name: 🔄 Generate Prisma client
      run: npm run db:generate
      env:
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/zenith_test
        
    - name: 🚀 Deploy database schema
      run: npm run db:push
      env:
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/zenith_test

  # ===============================
  # Build Applications
  # ===============================
  build:
    name: 🏗️ Build Applications
    runs-on: ubuntu-latest
    needs: [quality, database]
    
    strategy:
      matrix:
        app: [backend, frontend]
        
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 🔧 Install dependencies
      run: npm ci
      
    - name: 🏗️ Build ${{ matrix.app }}
      run: npm run build --workspace=@zenith/${{ matrix.app }}
      
    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.app }}-build
        path: apps/${{ matrix.app }}/dist

  # ===============================
  # Docker Build & Security Scan
  # ===============================
  docker:
    name: 🐳 Docker Build & Security
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'push'
    
    permissions:
      contents: read
      packages: write
      security-events: write
      
    strategy:
      matrix:
        service: [backend, frontend]
        
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔐 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 🏷️ Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: 🏗️ Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/${{ matrix.service }}.Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: 🔒 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: 📤 Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # ===============================
  # Integration Tests
  # ===============================
  integration:
    name: 🧪 Integration Tests
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Start test environment
      run: |
        docker-compose -f docker-compose.yml up -d
        
    - name: ⏳ Wait for services
      run: |
        sleep 30
        docker-compose ps
        
    - name: 🔍 Health check
      run: |
        curl -f http://localhost:3001/health || exit 1
        curl -f http://localhost:3000 || exit 1
        
    - name: 🧪 Run integration tests
      run: |
        # Add your integration tests here
        echo "Integration tests would run here"
        
    - name: 📊 Collect test results
      if: always()
      run: |
        docker-compose logs > test-logs.txt
        
    - name: 📤 Upload test logs
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-logs
        path: test-logs.txt
        
    - name: 🧹 Cleanup
      if: always()
      run: docker-compose down -v

  # ===============================
  # Deployment (Production)
  # ===============================
  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: https://zenithplatform.com
      
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🚀 Deploy to production
      run: |
        echo "🚀 Deploying Zenith Platform to production..."
        echo "This would trigger your deployment process"
        # Add your deployment commands here
        
    - name: 📧 Notify team
      if: success()
      run: |
        echo "✅ Deployment successful!"
        # Add notification logic here

  # ===============================
  # Performance Testing
  # ===============================
  performance:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: [deploy]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🏃 Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        configPath: './.lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true